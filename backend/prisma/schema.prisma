// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema e-commerce + forum
// by ChatGPT

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // atau mysql sesuai kebutuhanmu
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  email        String       @unique
  password     String
  isAdmin      Boolean      @default(false)
  refreshToken String?
  favorites    Favorite[]
  forums       Forum[]
  replies      ForumReply[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  imageUrl String?
  products Product[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  price       Float
  discount    Float?
  imageUrl    String?
  categoryId  Int?
  category    Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants    ProductVariant[]
  favorites   Favorite[]
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  color     String
  imageUrl  String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Banner {
  id       Int    @id @default(autoincrement())
  imageUrl String
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Forum {
  id        Int          @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime     @default(now())
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   ForumReply[]
}

model ForumReply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  forumId   Int
  userId    Int
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
